//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError } from 'axios';
import type { AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    protected instance: AxiosInstance;
    protected baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance || axios.create();

        this.baseUrl = baseUrl ?? "";

    }

    /**
     * @return OK
     */
    getWeatherForecast( cancelToken?: CancelToken): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/weatherforecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetWeatherForecast(_response);
        });
    }

    protected processGetWeatherForecast(response: AxiosResponse): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<WeatherForecast[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<WeatherForecast[]>(null as any);
    }

    /**
     * @return Success
     */
    getMovieById(id: number, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/Movies/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetMovieById(_response);
        });
    }

    protected processGetMovieById(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @return Success
     */
    product( cancelToken?: CancelToken): Promise<Product[]> {
        let url_ = this.baseUrl + "/Products";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProduct(_response);
        });
    }

    protected processProduct(response: AxiosResponse): Promise<Product[]> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Product.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return Promise.resolve<Product[]>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<Product[]>(null as any);
    }

    /**
     * @return Success
     */
    productGetById(id: number, cancelToken?: CancelToken): Promise<string> {
        let url_ = this.baseUrl + "/Products/{id}";
        if (id === undefined || id === null)
            throw new globalThis.Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "text/plain"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductGetById(_response);
        });
    }

    protected processProductGetById(response: AxiosResponse): Promise<string> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
                result200 = resultData200 !== undefined ? resultData200 : null as any;
    
            return Promise.resolve<string>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<string>(null as any);
    }

    /**
     * @param page (optional) 
     * @param rowsPerPage (optional) 
     * @param sortBy (optional) 
     * @param descending (optional) 
     * @return Success
     */
    productOverview(page: number | undefined, rowsPerPage: number | undefined, sortBy: string | undefined, descending: boolean | undefined, cancelToken?: CancelToken): Promise<ProductPaginationResponse> {
        let url_ = this.baseUrl + "/Products/overview?";
        if (page === null)
            throw new globalThis.Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (rowsPerPage === null)
            throw new globalThis.Error("The parameter 'rowsPerPage' cannot be null.");
        else if (rowsPerPage !== undefined)
            url_ += "rowsPerPage=" + encodeURIComponent("" + rowsPerPage) + "&";
        if (sortBy === null)
            throw new globalThis.Error("The parameter 'sortBy' cannot be null.");
        else if (sortBy !== undefined)
            url_ += "sortBy=" + encodeURIComponent("" + sortBy) + "&";
        if (descending === null)
            throw new globalThis.Error("The parameter 'descending' cannot be null.");
        else if (descending !== undefined)
            url_ += "descending=" + encodeURIComponent("" + descending) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: AxiosRequestConfig = {
            method: "GET",
            url: url_,
            headers: {
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processProductOverview(_response);
        });
    }

    protected processProductOverview(response: AxiosResponse): Promise<ProductPaginationResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (const k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = ProductPaginationResponse.fromJS(resultData200);
            return Promise.resolve<ProductPaginationResponse>(result200);

        } else if (status !== 200 && status !== 204) {
            const _responseText = response.data;
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<ProductPaginationResponse>(null as any);
    }
}

export class Batch implements IBatch {
    id?: number;
    number?: string | undefined;
    description?: string | undefined;
    productionDate?: Date;
    expireDate?: Date;
    dimensionValue?: DimensionValue;
    createdAt?: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IBatch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.number = _data["number"];
            this.description = _data["description"];
            this.productionDate = _data["productionDate"] ? new Date(_data["productionDate"].toString()) : undefined as any;
            this.expireDate = _data["expireDate"] ? new Date(_data["expireDate"].toString()) : undefined as any;
            this.dimensionValue = _data["dimensionValue"] ? DimensionValue.fromJS(_data["dimensionValue"]) : undefined as any;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): Batch {
        data = typeof data === 'object' ? data : {};
        let result = new Batch();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["number"] = this.number;
        data["description"] = this.description;
        data["productionDate"] = this.productionDate ? this.productionDate.toISOString() : undefined as any;
        data["expireDate"] = this.expireDate ? this.expireDate.toISOString() : undefined as any;
        data["dimensionValue"] = this.dimensionValue ? this.dimensionValue.toJSON() : undefined as any;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface IBatch {
    id?: number;
    number?: string | undefined;
    description?: string | undefined;
    productionDate?: Date;
    expireDate?: Date;
    dimensionValue?: DimensionValue;
    createdAt?: Date;
    updatedAt?: Date | undefined;
}

export class DateOnly implements IDateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    readonly dayOfYear?: number;
    readonly dayNumber?: number;

    constructor(data?: IDateOnly) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
            this.day = _data["day"];
            this.dayOfWeek = _data["dayOfWeek"];
            (this as any).dayOfYear = _data["dayOfYear"];
            (this as any).dayNumber = _data["dayNumber"];
        }
    }

    static fromJS(data: any): DateOnly {
        data = typeof data === 'object' ? data : {};
        let result = new DateOnly();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        data["day"] = this.day;
        data["dayOfWeek"] = this.dayOfWeek;
        data["dayOfYear"] = this.dayOfYear;
        data["dayNumber"] = this.dayNumber;
        return data;
    }
}

export interface IDateOnly {
    year?: number;
    month?: number;
    day?: number;
    dayOfWeek?: DayOfWeek;
    dayOfYear?: number;
    dayNumber?: number;
}

export enum DayOfWeek {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}

export class Dimension implements IDimension {
    id?: number;
    name?: string | undefined;
    type?: DimensionType;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    dimensionValues?: DimensionValue[] | undefined;
    products?: Product[] | undefined;

    constructor(data?: IDimension) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.type = _data["type"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
            if (Array.isArray(_data["dimensionValues"])) {
                this.dimensionValues = [] as any;
                for (let item of _data["dimensionValues"])
                    this.dimensionValues!.push(DimensionValue.fromJS(item));
            }
            if (Array.isArray(_data["products"])) {
                this.products = [] as any;
                for (let item of _data["products"])
                    this.products!.push(Product.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Dimension {
        data = typeof data === 'object' ? data : {};
        let result = new Dimension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["type"] = this.type;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        if (Array.isArray(this.dimensionValues)) {
            data["dimensionValues"] = [];
            for (let item of this.dimensionValues)
                data["dimensionValues"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.products)) {
            data["products"] = [];
            for (let item of this.products)
                data["products"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IDimension {
    id?: number;
    name?: string | undefined;
    type?: DimensionType;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    dimensionValues?: DimensionValue[] | undefined;
    products?: Product[] | undefined;
}

export enum DimensionType {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class DimensionValue implements IDimensionValue {
    id?: number;
    dimensionId?: number;
    dimension?: Dimension;
    value?: string | undefined;
    batchId?: number | undefined;
    batch?: Batch;
    createdAt?: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IDimensionValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dimensionId = _data["dimensionId"];
            this.dimension = _data["dimension"] ? Dimension.fromJS(_data["dimension"]) : undefined as any;
            this.value = _data["value"];
            this.batchId = _data["batchId"];
            this.batch = _data["batch"] ? Batch.fromJS(_data["batch"]) : undefined as any;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): DimensionValue {
        data = typeof data === 'object' ? data : {};
        let result = new DimensionValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dimensionId"] = this.dimensionId;
        data["dimension"] = this.dimension ? this.dimension.toJSON() : undefined as any;
        data["value"] = this.value;
        data["batchId"] = this.batchId;
        data["batch"] = this.batch ? this.batch.toJSON() : undefined as any;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface IDimensionValue {
    id?: number;
    dimensionId?: number;
    dimension?: Dimension;
    value?: string | undefined;
    batchId?: number | undefined;
    batch?: Batch;
    createdAt?: Date;
    updatedAt?: Date | undefined;
}

export class Product implements IProduct {
    id?: number;
    name?: string | undefined;
    dimensions?: Dimension[] | undefined;
    variants?: Variant[] | undefined;
    createdAt?: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IProduct) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["dimensions"])) {
                this.dimensions = [] as any;
                for (let item of _data["dimensions"])
                    this.dimensions!.push(Dimension.fromJS(item));
            }
            if (Array.isArray(_data["variants"])) {
                this.variants = [] as any;
                for (let item of _data["variants"])
                    this.variants!.push(Variant.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): Product {
        data = typeof data === 'object' ? data : {};
        let result = new Product();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.dimensions)) {
            data["dimensions"] = [];
            for (let item of this.dimensions)
                data["dimensions"].push(item ? item.toJSON() : undefined as any);
        }
        if (Array.isArray(this.variants)) {
            data["variants"] = [];
            for (let item of this.variants)
                data["variants"].push(item ? item.toJSON() : undefined as any);
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface IProduct {
    id?: number;
    name?: string | undefined;
    dimensions?: Dimension[] | undefined;
    variants?: Variant[] | undefined;
    createdAt?: Date;
    updatedAt?: Date | undefined;
}

export class ProductPaginationResponse implements IProductPaginationResponse {
    pageItems?: Product[] | undefined;
    totalItemsCount?: number;

    constructor(data?: IProductPaginationResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["pageItems"])) {
                this.pageItems = [] as any;
                for (let item of _data["pageItems"])
                    this.pageItems!.push(Product.fromJS(item));
            }
            this.totalItemsCount = _data["totalItemsCount"];
        }
    }

    static fromJS(data: any): ProductPaginationResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ProductPaginationResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.pageItems)) {
            data["pageItems"] = [];
            for (let item of this.pageItems)
                data["pageItems"].push(item ? item.toJSON() : undefined as any);
        }
        data["totalItemsCount"] = this.totalItemsCount;
        return data;
    }
}

export interface IProductPaginationResponse {
    pageItems?: Product[] | undefined;
    totalItemsCount?: number;
}

export class Variant implements IVariant {
    id?: number;
    name?: string | undefined;
    isMainVariant?: boolean;
    mainVariantId?: number | undefined;
    mainVariant?: Variant;
    productId?: number;
    product?: Product;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    variantDimensionValues?: VariantDimensionValue[] | undefined;

    constructor(data?: IVariant) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.isMainVariant = _data["isMainVariant"];
            this.mainVariantId = _data["mainVariantId"];
            this.mainVariant = _data["mainVariant"] ? Variant.fromJS(_data["mainVariant"]) : undefined as any;
            this.productId = _data["productId"];
            this.product = _data["product"] ? Product.fromJS(_data["product"]) : undefined as any;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
            if (Array.isArray(_data["variantDimensionValues"])) {
                this.variantDimensionValues = [] as any;
                for (let item of _data["variantDimensionValues"])
                    this.variantDimensionValues!.push(VariantDimensionValue.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Variant {
        data = typeof data === 'object' ? data : {};
        let result = new Variant();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["isMainVariant"] = this.isMainVariant;
        data["mainVariantId"] = this.mainVariantId;
        data["mainVariant"] = this.mainVariant ? this.mainVariant.toJSON() : undefined as any;
        data["productId"] = this.productId;
        data["product"] = this.product ? this.product.toJSON() : undefined as any;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        if (Array.isArray(this.variantDimensionValues)) {
            data["variantDimensionValues"] = [];
            for (let item of this.variantDimensionValues)
                data["variantDimensionValues"].push(item ? item.toJSON() : undefined as any);
        }
        return data;
    }
}

export interface IVariant {
    id?: number;
    name?: string | undefined;
    isMainVariant?: boolean;
    mainVariantId?: number | undefined;
    mainVariant?: Variant;
    productId?: number;
    product?: Product;
    createdAt?: Date;
    updatedAt?: Date | undefined;
    variantDimensionValues?: VariantDimensionValue[] | undefined;
}

export class VariantDimensionValue implements IVariantDimensionValue {
    id?: number;
    variantId?: number;
    variant?: Variant;
    dimensionValueId?: number;
    dimensionValue?: DimensionValue;
    createdAt?: Date;
    updatedAt?: Date | undefined;

    constructor(data?: IVariantDimensionValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.variantId = _data["variantId"];
            this.variant = _data["variant"] ? Variant.fromJS(_data["variant"]) : undefined as any;
            this.dimensionValueId = _data["dimensionValueId"];
            this.dimensionValue = _data["dimensionValue"] ? DimensionValue.fromJS(_data["dimensionValue"]) : undefined as any;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : undefined as any;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): VariantDimensionValue {
        data = typeof data === 'object' ? data : {};
        let result = new VariantDimensionValue();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["variantId"] = this.variantId;
        data["variant"] = this.variant ? this.variant.toJSON() : undefined as any;
        data["dimensionValueId"] = this.dimensionValueId;
        data["dimensionValue"] = this.dimensionValue ? this.dimensionValue.toJSON() : undefined as any;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : undefined as any;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : undefined as any;
        return data;
    }
}

export interface IVariantDimensionValue {
    id?: number;
    variantId?: number;
    variant?: Variant;
    dimensionValueId?: number;
    dimensionValue?: DimensionValue;
    createdAt?: Date;
    updatedAt?: Date | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: DateOnly;
    temperatureC?: number;
    summary?: string | undefined;
    readonly temperatureF?: number;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? DateOnly.fromJS(_data["date"]) : undefined as any;
            this.temperatureC = _data["temperatureC"];
            this.summary = _data["summary"];
            (this as any).temperatureF = _data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toJSON() : undefined as any;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data;
    }
}

export interface IWeatherForecast {
    date?: DateOnly;
    temperatureC?: number;
    summary?: string | undefined;
    temperatureF?: number;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}